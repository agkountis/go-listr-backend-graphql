package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"fmt"

	"github.com/agkountis/go-listr-backend-graphql/database"
	"github.com/agkountis/go-listr-backend-graphql/graph/model"
)

// CreateList is the resolver for the createList field.
func (r *mutationResolver) CreateList(ctx context.Context, input model.NewList) (*model.List, error) {
	panic(fmt.Errorf("not implemented: CreateList - createList"))
}

// AddListItems is the resolver for the addListItems field.
func (r *mutationResolver) AddListItems(ctx context.Context, input model.NewListItems) ([]*model.ListItem, error) {
	panic(fmt.Errorf("not implemented: AddListItems - addListItems"))
}

// List is the resolver for the list field.
func (r *queryResolver) List(ctx context.Context) (*model.List, error) {
	panic(fmt.Errorf("not implemented: List - list"))
}

// Lists is the resolver for the lists field.
func (r *queryResolver) Lists(ctx context.Context) ([]*model.List, error) {
	db := r.Db

	var lists []database.List
	err := db.Find(&lists).Error

	if err != nil {
		return nil, err
	}

	gqlLists := make([]*model.List, 0, len(lists))

	for i := 0; i < len(lists); i++ {
		dbList := lists[i]
		gqlList := model.List{
			ID:    dbList.ID.String(),
			Name:  dbList.Name,
			Items: nil,
		}
		gqlLists = append(gqlLists, &gqlList)
	}

	return gqlLists, nil
}

// ListItem is the resolver for the listItem field.
func (r *queryResolver) ListItem(ctx context.Context) (*model.ListItem, error) {
	panic(fmt.Errorf("not implemented: ListItem - listItem"))
}

// ListItems is the resolver for the listItems field.
func (r *queryResolver) ListItems(ctx context.Context) ([]*model.ListItem, error) {
	panic(fmt.Errorf("not implemented: ListItems - listItems"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
